@using PortfolioWebsite.Client.Services;
@inject PortfolioWebsite.Client.Services.AppState AppState
@inject IJSRuntime jsRuntime;

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />

<MudAppBar Color="MudBlazor.Color.Primary" Fixed="true" Dense="false">
    <MudSpacer />
    <MudButtonGroup Class="" Style="" Color="MudBlazor.Color.Default" Variant="MudBlazor.Variant.Outlined">
        <MudButton Href="/"         Class = "mud-theme-primary"Style="height:45px; max-width:250px;" Variant="MudBlazor.Variant.Text"  >About</MudButton>
        <MudButton Href="/projects"Class = "mud-theme-primary"Style="height:45px; max-width:250px;" Variant="MudBlazor.Variant.Text"   >Projects</MudButton>
        <MudButton Href="/contact"  Class = "mud-theme-primary"Style="height:45px; max-width:250px;" Variant="MudBlazor.Variant.Text"  >Contact</MudButton>
        <MudButton Href="/admin"  Class = "mud-theme-primary"Style="height:45px; max-width:250px;" Variant="MudBlazor.Variant.Text"    >Admin</MudButton>
    </MudButtonGroup>
    <MudSpacer />
    <!--<MudSwitch @bind-Checked="@_isDarkMode" Color="MudBlazor.Color.Primary" Class="object-right ml-6" Style="padding-top:5px" T="bool" Label="Toggle Light/Dark Mode" /> -->
</MudAppBar>

@if (underConstruction)
{
    <PortfolioWebsite.Client.Components.ConstructionBanner></PortfolioWebsite.Client.Components.ConstructionBanner>
}

@code {

    private bool underConstruction = true;
    private bool isMobile = false;
    private string deviceType = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Task.Run(()=>GetDevice());
            StateHasChanged();
        }
    }

    private async Task GetDevice()
    {
        isMobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        deviceType = isMobile ? "Mobile" : "Desktop";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
		{
            //AppState.OnChange += StateHasChanged;
        }
    }
    //on page load
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        //AppState.OnChange -= StateHasChanged;
    }

    private void StateHasChanged()
    {
        switch (AppState.currentPage)
        {
            case CurrentPage.AboutMe:
                aboutMeActive = true;
                projectsActive = false;
                contactActive = false;
                adminActive = false;
                break;
            case CurrentPage.Projects:
                aboutMeActive = false;
                projectsActive = true;
                contactActive = false;
                adminActive = false;
                break;
            case CurrentPage.Contact:
                aboutMeActive = false;
                projectsActive = false;
                contactActive = true;
                adminActive = false;
                break;
            case CurrentPage.Admin:
                aboutMeActive = false;
                projectsActive = false;
                contactActive = false;
                adminActive = true;
                break;
        }
    }

    bool aboutMeActive = true;
    bool projectsActive = false;
    bool contactActive = false;
    bool adminActive = false;

    bool sidebarExpanded = true;
    private MudTheme _theme = new();
    private bool _isDarkMode = true;
}